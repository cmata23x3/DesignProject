//Lab 6: Unpiplined Beta

.include "nominal.jsim" 
.include "stdcell.jsim" 
//.include "lab6pc.jsim" 
//.include "lab6regfile.jsim"
//.include "lab6ctl.jsim" 
//.include "lab6basicblock.jsim"
.include "lab6checkoff.jsim"

//****Program Counter**** 

//*32 bit two input mux; Xid s d0 d1 z mux2
.subckt 32mux sel A[31:0] B[31:0] OUT[31:0]
X32mux sel#32 A[31:0] B[31:0] OUT[31:0] mux2
.ends

//*PC Dreg; Xid d clk q dreg
.subckt 32dreg clk in[31:0] out[31:0]
X32dreg in[31:0] clk#32 out[31:0] dreg
.ends

//**pc circuit!**
.subckt pc clk reset ia[31:0] iaRelBr[31:0] pcsel[2:0] illops[31:0] 
+ xadr[31:0] jt[31:0] sxtc[31:0] nextia[31:0]

//Supervisor bit logic! Use AND gate; called super31
Xsvisor ia[31] jt[31] super31 and2

//Add 4 to ia/current pc to make nextia
X4addr ia[31:0] 0#29 vdd 0#2 0 nextia[31:0] co 32adder

//Add iaplus4 to sxtc --> iaRelBr (Relative branch)
Xiabr nextia[31:0] sxtc[29:0] 0#2 0 iaRelBr[31:0] co1 32adder


//Mux5; 3 select bits; 5 inputs; 1 output
Xpcselmux pcsel[2:0] nextia[31:0] iaRelBr[31:0] super31 jt[30:2] 0#2 illops[31:0] xadr[31:0] ia_next[31:0]  mux5

//reset; new pc value; 0x0; output *****could cause issues!!!!********
Xresetmux reset ia_next[31:0] vdd 0#31 pcupdate[31:0] 32mux

Xpcdreg clk pcupdate[31:0] ia[31:0] 32dreg

.ends 

//****Regfile****

//5 bit two input mux; Xid s d0 d1 z mux2
.subckt 5mux2 sel A[4:0] B[4:0] OUT[4:0]
X5mux sel#5 A[4:0] B[4:0] OUT[4:0] mux2
.ends

.subckt r31ckr r[4:0] r31sel //use cascading to speed up; if 1 then reg31 else other reg
Xand1 r[1:0] a and2
Xand2 r[2] a b and2
Xand3 r[3] b c and2
Xand4 r[4] c r31sel and2
.ends

.subckt regfile clk werf ra2sel ra[4:0] rb[4:0] rc[4:0] wdata[31:0] radata[31:0] rbdata[31:0] 
//RA2SEL mux
Xmuxra2 ra2sel rb[4:0] rc[4:0] ra2mux[4:0] 5mux2

//Register file 
Xregfile 
 + vdd 0 0 ra[4:0] adata[31:0] // A read port 
 + vdd 0 0 ra2mux[4:0] bdata[31:0] // B read port 
 + 0 clk werf rc[4:0] wdata[31:0] // write port 
 + $memory width=32 nlocations=31 

// check each input reg for reg31
//checking inputA & input B
Xregcka ra[4:0] regAck r31ckr
Xregckb ra2mux[4:0] regBck r31ckr

//use muxes to choose correct reg values
XmuxA regAck adata[31:0] 0#32 radata[31:0] 32mux
XmuxB regBck bdata[31:0] 0#32 rbdata[31:0] 32mux
.ends 

//****Control Logic****


.subckt ctl reset id[31:26] ra2sel bsel alufn[4:0] wdsel[1:0] werf moe wr z pcsel[2:0] asel wasel

Xctl vdd 0 0 id[31:26] // one read port 
 + xpcsel[2:0] wasel asel ra2sel bsel alufn[4:0] wdsel[1:0] werf moe xwr 

 + $memory width=17 nlocations=64 contents=( 
 + 0b01110000000000100 // opcode=0b000000 
 + 0b01110000000000100 // opcode=0b000001 
 + 0b01110000000000100 // opcode = 0b000010 NOP
 + 0b01110000000000100 // opcode = 0b000011 NOP
 + 0b01110000000000100 // opcode = 0b000100 NOP
 + 0b01110000000000100 // opcode = 0b000101 NOP
 + 0b01110000000000100 // opcode = 0b000110 NOP
 + 0b01110000000000100 // opcode = 0b000111 NOP
 + 0b01110000000000100 // opcode = 0b001000 NOP
 + 0b01110000000000100 // opcode = 0b001001 NOP
 + 0b01110000000000100 // opcode = 0b001010 NOP
 + 0b01110000000000100 // opcode = 0b001011 NOP
 + 0b01110000000000100 // opcode = 0b001100 NOP
 + 0b01110000000000100 // opcode = 0b001101 NOP
 + 0b01110000000000100 // opcode = 0b001110 NOP
 + 0b01110000000000100 // opcode = 0b001111 NOP
 + 0b01110000000000100 // opcode = 0b010000 NOP
 + 0b01110000000000100 // opcode = 0b010001 NOP
 + 0b01110000000000100 // opcode = 0b010010 NOP
 + 0b01110000000000100 // opcode = 0b010011 NOP
 + 0b01110000000000100 // opcode = 0b010100 NOP
 + 0b01110000000000100 // opcode = 0b010101 NOP
 + 0b01110000000000100 // opcode = 0b010110 NOP
 + 0b01110000000000100 // opcode = 0b010111 NOP
 + 0b00000010000010110 // opcode = 0b011000 LD
 + 0b00000110000000001 // opcode = 0b011001 ST
 + 0b01110000000000100 // opcode = 0b011010 NOP
 + 0b01000000000000100 // opcode = 0b011011 JMP 
 + 0b10100000000000100 // opcode = 0b011100 BEQ 
 + 0b11100000000000100 // opcode = 0b011101 BNE
 + 0b01110000000000100 // opcode = 0b011110 NOP
 + 0b00001001101010110 // opcode = 0b011111 LDR *****Chk
 + 0b00000000000001100 // opcode = 0b100000 ADD
 + 0b00000000000101100 // opcode = 0b100001 SUB
 + 0b01110000000000100  // opcode = 0b100010 MUL (OPTIONAL)
 + 0b01110000000000100 // opcode = 0b100011 DIV (OPTIONAL)
 + 0b00000000010101100 // opcode = 0b100100 CMPEQ 
 + 0b00000000011101100 // opcode = 0b100101 CMPLT
 + 0b00000000110101100 // opcode = 0b100110 CMPLE
 + 0b01110000000000100 // opcode = 0b100111 NOP
 + 0b00000001100001100 // opcode = 0b101000 AND
 + 0b00000001111001100	//opcode = 0b101001 OR
 + 0b00000001011001100	//opcode = 0b101010 XOR
 + 0b00000001100101100	//opcode = 0b101011 XNOR
 + 0b00000000100001100	//opcode = 0b101100 SHL
 + 0b00000000100101100	//opcode = 0b101101 SHR
 + 0b00000000101101100	//opcode = 0b101110 SRA
 + 0b01110000000000100	//opcode = 0b101111 NOP
 + 0b00000010000001100	//opcode = 0b110000 ADDC
 + 0b00000010000101100	//opcode = 0b110001 SUBC
 + 0b01110000000000100	//opcode = 0b110010 MULC (optional)
 + 0b01110000000000100	//opcode = 0b110011 DIVC (optional)
 + 0b00000010010101100	//opcode = 0b110100 CMPEQC
 + 0b00000010011101100	//opcode = 0b110101 CMPLTC
 + 0b00000010110101100	//opcode = 0b110110 CMPLEC
 + 0b01110000000000100	//opcode = 0b110111 NOP
 + 0b00000011100001100	//opcode = 0b111000 ANDC
 + 0b00000011111001100	//opcode = 0b111001 ORC
 + 0b00000011011001100	//opcode = 0b111010 XORC
 + 0b00000011100101100	//opcode = 0b111011 XNORC
 + 0b00000010100001100	//opcode = 0b111100 SHLC
 + 0b00000010100101100	//opcode = 0b111101 SHRC
 + 0b00000010101101100	//opcode = 0b111110 SRAC
 + 0b01110000000000100	//opcode = 0b111111 NOP
 + ) 

// Logic to force WR = 0 at reset
Xinv reset notreset inverter
Xand xwr notreset wr and2 //Changed xpcsel to pcsel*** 

// Z logic for BNE, BEQ
Xand2 xpcsel[2] xpcsel[0] branch and2 //could be taking either BNE or BEQ

Xzinv z zinv inverter_2 //not z

//use mux to allow PCSEL[1] bit to determine which z to use
// if xpcsel[1] = 0; it's a BEQ; use the uninverted Z
// if xpcsel[1] = 1; its  a BNE; use the ~Z
Xzmux xpcsel[1] z zinv branchZvalue mux2 

XmuxBR branch#3 xpcsel[2:0] 0 0 branchZvalue pcsel[2:0] mux2



.ends 

//****ALU****
.subckt BOOL alufn[3:0] A[31:0] B[31:0] OUT[31:0] 
xbool A[31:0] B[31:0] alufn[0]#32 alufn[1]#32 alufn[2]#32 alufn[3]#32 OUT[31:0] mux4 
.ends 
 
.subckt ARITH alufn[1:0] A[31:0] B[31:0] OUT[31:0] Z V N 
//32 bit Xor; inputs B[31:0] & alufn[0]; output XB[31:0]
X32xor1  B[31:0] alufn[0] bx[31:0] 32xor
Xadd A[31:0] bx[31:0] alufn[0] addout[31:0] lastS 32adder //changed OUT[31:0] for ARITH
Xmult A[31:0] B[31:0] mulout[31:0] multiply
Xsout alufn[1]#32 addout[31:0] mulout[31:0] OUT[31:0] mux2
//Additional outputs Z;V;N
//Z output; 
Xoutz addout[31:0] Z 32norCascade //changed OUT[31:0] for ARITH

//N output; 1: when S[31]==1; 0: otherwise
.connect addout[31] N //changed OUT[31:0] for ARITH
 
//V output
XinvA A[31] notA inverter
XinvB bx[31] notB inverter
XinvS OUT[31] notS inverter 
Xvand1 A[31] bx[31] notS vx and3  
Xvand2 notA notB addout[31] vy and3
Xvor vx vy V or2
.ends 

*************ARITH HELPER CIRCUITS*******************
*Full Adder: inputs A, B & Ci, output is S, Co; taken from Lab2
.subckt FA a b ci s co
//S output; made of XOR Gates
Xxor1 a b 1 xor2 //name, inp, inp, output, instance
Xxor2 1 ci s xor2
//Co output; made of 4 NAND gates
Xnand21 a b 2 nand2 
Xnand22 a ci 3 nand2 
Xnand23 b ci 4 nand2
Xnand31 2 3 4 co nand3//name, inp, inp, inp, out
.ends

*32 bit adder: inputs AX[31:0] BX[31:0] & ci (carry-in); output S[31:0] co(last carry out)
.subckt 32adder ax[31:0] bx[31:0] ci s[31:0] co 
Xfirst  ax[0]    bx[0]    ci           s[0]    c_over[0] FA
Xmiddle ax[30:1] bx[30:1] c_over[29:0] s[30:1] c_over[30:1] FA
Xend    ax[31]   bx[31]   c_over[30]   s[31]   co FA
.ends

*32-input NOR Gate: input S[31:0]; ouput z
.subckt 32norCascade s[31:0] z //name; input; output;
//THis is the faster form; cascading format for the ALU
Xor1 s[1:0] a or2 //Cascading set up instead 
Xor2 s[2] a b or2
Xor3 s[3] b c or2
Xor4 s[4] c d or2
Xor5 s[5] d e or2
Xor6 s[6] e f or2
Xor7 s[7] f g or2
Xor8 s[8] g h or2
Xor9 s[9] h i or2
Xor10 s[10] i j or2
Xor11 s[11] j k or2
Xor12 s[12] k l or2
Xor13 s[13] l m or2
Xor14 s[14] m n or2
Xor15 s[15] n o or2
Xor16 s[16] o p or2
Xor17 s[17] p q or2
Xor18 s[18] q r or2
Xor19 s[19] r s or2
Xor20 s[20] s t or2
Xor21 s[21] t u or2
Xor22 s[22] u v or2
Xor23 s[23] v w or2
Xor24 s[24] w x or2
Xor25 s[25] x y or2
Xor26 s[26] y aa or2
Xor27 s[27] aa bb or2
Xor28 s[28] bb cc or2
Xor29 s[29] cc dd or2
Xor30 s[30] dd ee or2
Xor31 s[31] ee z  nor2
.ends

*32-input NOR Gate: input S[31:0]; ouput z
.subckt 32norTree s[31:0] z //name; input; output;
Xnor1 s[3:0] a nor4//inp, inp, inp, inp; out; //This is the of NORs tree format; Its slow so use other format
Xnor2 s[7:4] b nor4
Xnor3 s[11:8] c nor4 
Xnor4 s[15:12] d nor4
Xnor5 s[19:16] e nor4
Xnor6 s[23:20] f nor4
Xnor7 s[27:24] g nor4
Xnor8 s[31:28] h nor4
Xand1 a b c d x and4 //inp, inp, inp, inp; out;
Xand2 e f g h y and4
Xand3 x y z and2 //inp, inpt; out
.ends

*32 bit input XOR: input B[31:0] & alufn; output BX[31:0]
.subckt 32xor b[31:0] alufn bx[31:0] 
Xxor b[31:0] alufn#32 bx[31:0] xor2
.ends

*32 bit multiply
.subckt multiply ax[31:0] bx[31:0] OUT[31:0]
Xpartial0  bx[0]#32 ax[31:0] lineouta[31:0] and2
Xpartial1  bx[1]#32 ax[31:0] lineoutb[31:0] and2
Xpartial2  bx[2]#32 ax[31:0] lineoutc[31:0] and2
Xpartial3  bx[3]#32 ax[31:0] lineoutd[31:0] and2
Xpartial4  bx[4]#32 ax[31:0] lineoute[31:0] and2
Xpartial5  bx[5]#32 ax[31:0] lineoutf[31:0] and2
Xpartial6  bx[6]#32 ax[31:0] lineoutg[31:0] and2
Xpartial7  bx[7]#32 ax[31:0] lineouth[31:0] and2
Xpartial8  bx[8]#32 ax[31:0] lineouti[31:0] and2
Xpartial9  bx[9]#32 ax[31:0] lineoutj[31:0] and2
Xpartial10 bx[10]#32 ax[31:0] lineoutk[31:0] and2
Xpartial11 bx[11]#32 ax[31:0] lineoutl[31:0] and2
Xpartial12 bx[12]#32 ax[31:0] lineoutm[31:0] and2
Xpartial13 bx[13]#32 ax[31:0] lineoutn[31:0] and2
Xpartial14 bx[14]#32 ax[31:0] lineouto[31:0] and2
Xpartial15 bx[15]#32 ax[31:0] lineoutp[31:0] and2
Xpartial16 bx[16]#32 ax[31:0] lineoutq[31:0] and2
Xpartial17 bx[17]#32 ax[31:0] lineoutr[31:0] and2
Xpartial18 bx[18]#32 ax[31:0] lineouts[31:0] and2
Xpartial19 bx[19]#32 ax[31:0] lineoutt[31:0] and2
Xpartial20 bx[20]#32 ax[31:0] lineoutu[31:0] and2
Xpartial21 bx[21]#32 ax[31:0] lineoutv[31:0] and2
Xpartial22 bx[22]#32 ax[31:0] lineoutw[31:0] and2
Xpartial23 bx[23]#32 ax[31:0] lineoutx[31:0] and2
Xpartial24 bx[24]#32 ax[31:0] lineouty[31:0] and2
Xpartial25 bx[25]#32 ax[31:0] lineoutz[31:0] and2
Xpartial26 bx[26]#32 ax[31:0] lineoutaa[31:0] and2
Xpartial27 bx[27]#32 ax[31:0] lineoutbb[31:0] and2
Xpartial28 bx[28]#32 ax[31:0] lineoutcc[31:0] and2
Xpartial29 bx[29]#32 ax[31:0] lineoutdd[31:0] and2
Xpartial30 bx[30]#32 ax[31:0] lineoutee[31:0] and2
Xpartial31 bx[31]#32 ax[31:0] lineoutff[31:0] and2

Xsumup0 lineouta[31:0] lineoutb[30:0] 0  0 suma[31:0]  t0  32adder
Xsumup1 suma[31:0]   lineoutc[29:0] 0#2  0 sumb[31:0]  t1  32adder
Xsumup2 sumb[31:0]   lineoutd[28:0] 0#3  0 sumc[31:0]  t2  32adder
Xsumup3 sumc[31:0]   lineoute[27:0] 0#4  0 sumd[31:0]  t3  32adder
Xsumup4 sumd[31:0]   lineoutf[26:0] 0#5  0 sume[31:0]  t4  32adder
Xsumup5 sume[31:0]   lineoutg[25:0] 0#6  0 sumf[31:0]  t5  32adder
Xsumup6 sumf[31:0]   lineouth[24:0] 0#7  0 sumg[31:0]  t6  32adder
Xsumup7 sumg[31:0]   lineouti[23:0] 0#8  0 sumh[31:0]  t7  32adder
Xsumup8 sumh[31:0]   lineoutj[22:0] 0#9  0 sumi[31:0]  t8  32adder
Xsumup9 sumi[31:0]   lineoutk[21:0] 0#10 0 sumj[31:0]  t9  32adder
Xsumup10 sumj[31:0]  lineoutl[20:0] 0#11 0 sumk[31:0]  t10 32adder
Xsumup11 sumk[31:0]  lineoutm[19:0] 0#12 0 suml[31:0]  t11 32adder
Xsumup12 suml[31:0]  lineoutn[18:0] 0#13 0 summ[31:0]  t12 32adder
Xsumup13 summ[31:0]  lineouto[17:0] 0#14 0 sumn[31:0]  t13 32adder
Xsumup14 sumn[31:0]  lineoutp[16:0] 0#15 0 sumo[31:0]  t14 32adder
Xsumup15 sumo[31:0]  lineoutq[15:0] 0#16 0 sump[31:0]  t15 32adder
Xsumup16 sump[31:0]  lineoutr[14:0] 0#17 0 sumq[31:0]  t16 32adder
Xsumup17 sumq[31:0]  lineouts[13:0] 0#18 0 sumr[31:0]  t17 32adder
Xsumup18 sumr[31:0]  lineoutt[12:0] 0#19 0 sums[31:0]  t18 32adder
Xsumup19 sums[31:0]  lineoutu[11:0] 0#20 0 sumt[31:0]  t19 32adder
Xsumup20 sumt[31:0]  lineoutv[10:0] 0#21 0 sumu[31:0]  t20 32adder
Xsumup21 sumu[31:0]  lineoutw[9:0]  0#22 0 sumv[31:0]  t21 32adder
Xsumup22 sumv[31:0]  lineoutx[8:0]  0#23 0 sumw[31:0]  t22 32adder
Xsumup23 sumw[31:0]  lineouty[7:0]  0#24 0 sumx[31:0]  t23 32adder
Xsumup24 sumx[31:0]  lineoutz[6:0]  0#25 0 sumy[31:0]  t24 32adder
Xsumup25 sumy[31:0]  lineoutaa[5:0] 0#26 0 sumz[31:0]  t25 32adder
Xsumup26 sumz[31:0]  lineoutbb[4:0] 0#27 0 sumaa[31:0] t26 32adder
Xsumup27 sumaa[31:0] lineoutcc[3:0] 0#28 0 sumbb[31:0] t27 32adder
Xsumup28 sumbb[31:0] lineoutdd[2:0] 0#29 0 sumcc[31:0] t28 32adder
Xsumup29 sumcc[31:0] lineoutee[1:0] 0#30 0 sumdd[31:0] t29 32adder
Xsumup30 sumdd[31:0] lineoutff[0]   0#31 0 OUT[31:0]   t30 32adder
.ends


***********************************
.subckt SHIFT alufn[1:0] A[31:0] B[31:0] OUT[31:0] 
XSHL A[31:0] B[4:0] 0 x[31:0] leftshft
Xand1 A[31] alufn[1] outand and2
Xnew A[0:31] B[4:0] outand y[0:31] leftshft

*XSHR A[0:31] B[4:0] 0 y[0:31] leftshft
*XSRA A[0:31] B[4:0] A[31] z[0:31] leftshft

Xmux alufn[0]#32 x[31:0] y[31:0] OUT[31:0] mux2 
.ends  
 
************************HELPER FUNCTION
.subckt leftshft a[31:0] b[4:0] filler shft[31:0] //inpt, inpt, inpt; output 
Xmux5 b[4]#32 a[31:0] a[15:0] filler#16 W[31:0] mux2
Xmux4 b[3]#32 W[31:0] W[23:0] filler#8  X[31:0] mux2
Xmux3 b[2]#32 X[31:0] X[27:0] filler#4  Y[31:0] mux2 
Xmux2 b[1]#32 Y[31:0] Y[29:0] filler#2  Z[31:0] mux2
Xmux1 b[0]#32 Z[31:0] Z[30:0] filler  shft[31:0] mux2
.ends

***********************************
.subckt CMP alufn3 alufn1 Z V N OUT[31:0] 
Xxor N V a xor2
Xoor Z a b or2
Xmux alufn3 alufn1 Z b a 0 OUT[0] mux4 //s0 s1 d0 d1 d2 d3 z mux4
.connect 0 OUT[31:1]
.ends 
 
.subckt alu alufn[4:0] a[31:0] b[31:0] out[31:0] z v n 
 
*** Generate outputs from each of BOOL, SHIFT, ARITH, CMP subcircuits: 
xbool alufn[3:0] a[31:0] b[31:0] boolout[31:0] BOOL 
xshift alufn[1:0] a[31:0] b[31:0] shiftout[31:0] SHIFT 
xarith alufn[1:0] a[31:0] b[31:0] arithout[31:0] z v n ARITH 
xcmp alufn[3] alufn[1] z v n cmpout[31:0] CMP 
 
*** Combine them, using three multiplexors: 
xmux1 alufn[4]#32 nonbool[31:0] boolout[31:0] out[31:0] mux2 
xmux2 alufn[2]#32 arithshift[31:0] cmpout[31:0] nonbool[31:0] mux2 
xmux3 alufn[3]#32 arithout[31:0] shiftout[31:0] arithshift[31:0] mux2 
 
.ends
//******************************************

//******Addition'l Circuits******
.subckt extendC input[15:0] out[31:0]
.connect out[31:16] input15
Xsame input[15:0] out[15:0] knex
.ends

.subckt knex a b
.connect a b
.ends

.subckt mux3 s[1:0] a[31:0] b[31:0] c[31:0] ans[31:0]
Xmux s[0]#32 s[1]#32 a[31:0] b[31:0] c[31:0] 0#32 ans[31:0] mux4
.ends

.subckt mux5 s[2:0] a[31:0] b[31:0] c[31:0] d[31:0] e[31:0] ans[31:0]
//firstMux; four option chosen by first two bits
XfirstMux s[0]#32 s[1]#32 a[31:0] b[31:0] c[31:0] d[31:0] temp[31:0] mux4
//secMux; option chosen by last bit being one
XfifthMux s[2]#32 temp[31:0] e[31:0] ans[31:0] mux2
.ends

//******Basic Beta******
/*
.subckt beta clk reset ia[31:0] id[31:0] ma[31:0] moe mrd[31:0] wr mwd[31:0]
//Program counter
Xpc clk reset ia[31:0] pc

//Regfile
Xregfile clk werf ra2sel id[20:16] id[15:11] id[25:21] wddata[31:0] radata[31:0] rbdata[31:0] regfile

//Ctrl
Xctl reset id[31:26] ra2sel bsel alufn[4:0] wdsel[1:0] werf moe wr ctl

//BSEL	   SEL		0	      1		     OUT
Xbselmux bsel#32 rbdata[31:0] id[15]#16 id[15:0] bout[31:0] mux2

//ALU
Xalu alufn[4:0] radata[31:0] bout[31:0] aluout[31:0] z v n alu

//WDSEL mux   S0        S1         00      01         10       11     out
Xwdselmux wdsel[0]#32 wdsel[1]#32 0#32 aluout[31:0] mrd[31:0] 0#32 wddata[31:0] mux4

//connect
XfirstConnect aluout[31:0] ma[31:0] knex
XsecondConnect rbdata[31:0] mwd[31:0] knex
.ends


*/
****BETA**ALL******

.subckt beta clk reset irq ia[31:0] id[31:0] ma[31:0] moe mrd[31:0] wr mwd[31:0]
//Need each of the basic blocks from before!

//**PC** Note: New inputs & outputs
//inputs: clk reset ia[31:0] iaRelBr[31:0] pcsel[2:0] illops[31:0] xadr[31:0] jt[31:0] sxtc[31:0] 
//output: nextia[31:0]
//  given given   given     made	made	 0x80000004 illops  0x80000008 xadr   jt(RD1)	   made	       made	
Xpc  clk   reset ia[31:0] iaBr[31:0] pcsel[2:0]   vdd 0#28 vdd 0#2 vdd 0#27 vdd 0#3 radata[31:0] sxtc[31:0] nextia[31:0] pc

//**CTL** 
//for outputs define temp vars then check em in exception handling
Xctl reset id[31:26] ra2sel bsel alufn[4:0] xwdsel[1:0] xwerf moe xwr z xpcsel[2:0] asel xwasel ctl


//**REGFILE** NOTE: new inputs & outs
//inputs: clk werf ra2sel ra[4:0] rb[4:0] rc[4:0] wdata[31:0] 
//outputs: radata[31:0] rbdata[31:0] 
//	 given  4rm ctl 4rm ctl     ra	  	rb 	rc   output of wdselMux   output RD1 outputRD2
Xregfl  clk     werf   ra2sel  id[20:16]  id[15:11] wa[4:0]   wdselout[31:0]    radata[31:0]  mwd[31:0] regfile
//clk werf ra2sel ra[4:0] rb[4:0] rc[4:0] wdata[31:0] radata[31:0] rbdata[31:0]

//Make the Z output logic
Xznor radata[31:0] z 32norTree

//**Create addition'l muxes

// make ASEL mux
Xaselmux asel#32 radata[31:0] 0 iaBr[30:0] aselout[31:0] mux2

//make BSEL mux
.connect sxtc[31:16] id[15] //wires to sign extend
Xwires sxtc[15:0] id[15:0] knex //wire together

Xbselmux bsel#32 mwd[31:0] sxtc[31:0] bselout[31:0] mux2
 
//make WASEL mux
//	 5muxesel rc[25:21]  R30 0b11110	out
Xwaselmux wasel#5 id[25:21] vdd vdd vdd vdd 0 wa[4:0] mux2

//make WDSEL mux 			0	  1	   2	   3	out
Xwdselmux wdsel[0]#32 wdsel[1]#32 nextia[31:0] ma[31:0] mrd[31:0] 0#32 wdselout[31:0] mux4

//ALU
Xalu alufn[4:0] aselout[31:0] bselout[31:0] ma[31:0] otherz otherv othern alu


//**EXCEPTIONS**
//Need addition'l logic for the jump, branch & exceptions

//Chck the mode we're in; 
Xmode ia[31] mode inverter 
//Chck to see whther we're in superviosr mode; in superviosr if mode =1 && irq=1
XchckIRQ irq mode supermode and2       
//If we are in superviosr mode!; change conditions based from ctrl logic table
//if in supermode, PCSEL = 4; otherwise send xpcsel
Xdeltapcsel supermode#3 xpcsel[2:0] vdd 0#2 pcsel[2:0] mux2
//If in supermode, wasel = 1; otherwise send xwasel
Xdeltawasel supermode xwasel vdd wasel mux2
//If in supermode, werf = 1; otherwise send xwerf
Xdeltawerf supermode xwerf vdd werf mux2
//If in supermode, wadsel = 00; otherwise send xwdsel
Xdeltawdsel supermode#2 xwdsel[1:0] 0 0 wdsel[1:0] mux2       
//If in supermode, wr = 0; otherwise send xwr
xdeltawr supermode xwr 0 wr mux2                              //get new xwr for if we're in IRQ


.ends

//other parts
//.subckt mux3 s[1:0] a[31:0] b[31:0] c[31:0] ans[31:0]/
//Xmux s[0]#32 s[1]#32 a[31:0] b[31:0] c[31:0] 0#32 ans[31:0] mux4
//.ends




















