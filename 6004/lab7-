.include "lab7macros.uasm"
.include "lab7checkoff.uasm"

regs: 	RESERVE(32)			| Array used to store register contents

UI:
	save_all_regs(regs)		|saves current values of registers
	
	LD(xp, -4, r0) 			| illegal instruction
	extract_field(r0,31,26, r1)	| extract opcode, bits 31:26
	CMPEQC(r1, 0b010000, r2)	| is opcode LDB
	BT(r2, LDB)			| yes, handle the LBD instruction.

	CMPEQC(r1,0b010001, r2)		| is opcode STB
	BT(r2, STB)			| yes, handle the STB instruction.

	LD(r31,regs,r0)       		| It?s something else.  Restore regs
        LD(r31,regs+4,r1)     		| we've used, and go to the system's
	LD(r31,regs+8,r2)     		| Illegal Instruction handler.
	BR(_IllegalInstruction)


LDB:
	extract_field(r0,25,21,r1)	| extract rc field
	MULC(r1,4,r1)			| convert to byte offset into regs array
	extract_field(r0, 20, 16, r2)   | extract ra
	MULC(r2, 4, r2)     		| convert to byte offset into regs array
	LD(r2, regs,r3)			| r3 <- reg[ra]

	extract_field(r0, 15, 0, r4)	| store literal in r4
	SHLC(r4, 16, r4)
	SRAC(r4,16,r4)			| sign extending literal

	ADD(r3, r4, r5)			| r5 <- reg[ra] + sxt(literal)
	LD(r5,0, r6)			| Mem[EA] = MDATA in r6	

	extract_field(r5,1,0,r7)	| extract 2 low-order bits of EA is r7

	CMPEQC(r7, 0b00, r8)		| if 2 low EA is 0b00
	BT(r8, LDBA)

	CMPEQC(r7, 0b01,r8)		| if 2 low EA is 0b01
	BT(r8, LDBB)

	CMPEQC(r7, 0b10, r8)		| if 2 low EA is 0b10
	BT(r8,LDBC)

	CMPEQC(r7, 0b11,r8)		| if 2 low EA is 0b11
	extract_field(r6, 31,24, r9)	| then MDATA 31:24 in r9
	ST(r9, regs, r1)		| store MDATA 31:24 in r1

	restore_all_regs(regs)
	JMP(xp)

LDBA:
	extract_field(r6, 7,0 r9)|   then MDATA 7:0 in r9
	ST(r9, regs, r1)         | store MDATA 7:0 in r1
	
	restore_all_regs(regs)
	JMP(xp)

LDBB: 
	extract_field(r6,15,8,r9) |   then MDATA 15:8 in r9
	ST(r9, regs, r1)          | store MDATA 7:0 in r1

	restore_all_regs(regs)
	JMP(xp)

LDBC:
	extract_field(r6,23, 16, r9) |   then MDATA 23:16 in r9
	ST(r9, regs,r1)              | store MDATA 23:16 in r1

	restore_all_regs(regs)
	JMP(xp)



STB:
	extract_field(r0, 25, 21, r1)   | extract rc field
	MULC(r1, 4, r1)			| convert to byte offset into regs array
	LD(r1, regs,r1)			| r1 <- reg[rc]
	extract_field(r1,7,0, r2)	| extract low 8 bits of reg[rc]

	extract_field(r0,20, 16, r3)	| extract ra
	MULC(r3,4,r3)			| convert to byte offset into regs array
	LD(r3, regs,r4)			| r4 <- reg[ra]

	extract_field(r0, 15, 0, r5)	| store literal in r5
	SHLC(r5, 16, r5)
	SRAC(r5,16,r5)			| sign extending literal

	ADD(r4, r5, r6)			| r6 <- reg[ra] + sxt(literal)
	LD(r6,0, r7)			| Mem[EA] = MDATA in r7	

	extract_field(r6,1,0,r8)	| 2 low-order bits of EA is in r8

	CMPEQC(r8, 0b00, r9)		| if 2 low EA is 0b00
	BT(r9, STBA)

	CMPEQC(r8, 0b01,r9)		| if 2 low EA is 0b01
	BT(r9, STBB)

	CMPEQC(r8, 0b10, r9)		| if 2 low EA is 0b10
	BT(r9,STBC)

	CMPEQC(r8, 0b11,r9)		| if 2 low EA is 0b11
	extract_field(r7,23,0,r7)	| extract lower 24 bits of mdata
	SHLC(r2, 24, r2)		| shift low bits of Reg[rc]
	ADD(r2,r7, r7)			| calculates new value of MDATA
	ST(r7, 0, r6)

	restore_all_regs(regs)
	JMP(xp)

STBA:
	SHRC(r7, 8, r7)			| shifts MDATA
	SHLC(r7, 8, r7)			| clears MDATA 
	ADD(r2, r7, r7)			| Reg[RC]8:0 = MDATA
	ST(r7,0, r6)
	
	restore_all_regs(regs)
	JMP(XP)

STBB:	
	extract_field(r7,7,0, r11)	| extract lower 8 bits of MDATA into r11
	extract_field(r7,31,16 r12)	| extract upper 8 bits of MDATA into r12
	SHLC(r12, 16, r12)		| shift left by 16 , upper bits of MDATA
	SHLC(r2, 8, r2)			| shift Reg[rc]7:0 to become bits 15:8
	ADD(r2, r11, r7)		| construct lower part of result
	ADD(r7, r12, r7)		| finish
	ST(r7, 0, r6)

	restore_all_regs(regs)
	JMP(XP)

STBC:
	extract_field(r7, 15, 0, r11) |extract lower 16 bits of MDATA into r11
	extract_field(r7, 31,24, r12) |extract higher 7 bits of MDATA
	SHLC(r11, 24, r11)            |
	SHLC(r2, 16, r2)              |
	ADD(r2, r11, r7)
	ADD(r7,r12, r7)
	ST(r7, 0, r6)

	restore_all_regs(regs)
	JMP(xp)
